DEBUG		= 1
#多个目录用空格分开
DIR_SRC		= ./src
DIR_INC 	= ./include #/root/data/workspace/c2/common/include
DIR_OBJ		= ./bin
DIR_LIB		= 
TARGET  	=lua luac#有多个文件含main函数，就有多个目标（文件名）/root/app/packages/lua-5.3.5/src
TARGET_SO	=lua
CC      := gcc -std=gnu99
LIBS    := dl m #readline
LIBS_STATIC    :=
LDFLAGS :=
DEFINES := LUA_USE_DLOPEN

SOURCE  := $(wildcard $(DIR_SRC)/*.c) $(wildcard $(DIR_SRC)/*.cpp)
# All of the sources participating in the build are defined here,二次替换
OBJ		:= $(patsubst %.c,%.o,$(patsubst %.cpp,%.o,$(notdir ${SOURCE})))
OBJS    := $(addprefix $(DIR_OBJ)/,$(OBJ))
#EXECOBJ = $(addprefix $(OBJDIR), $(EXECOBJA))
#DEPS	:=$(objects:.o=.d)  
DEPS	:= $(patsubst %.o,%.d,$(OBJS))
CFLAGS  :=$(addprefix -D,$(DEFINES))  $(addprefix -I,$(DIR_INC)) 
FILE_MK	:= $(wildcard $(DIR_SRC)/*.mk)
ifneq ($(strip $(FILE_MK)),)
-include $(FILE_MK)
endif

ifeq ($(DEBUG), 0) 
	CFLAGS+= -O2 -g
else
	CFLAGS+= -O0 -g3 -Wall #-fPIC
endif

CXXFLAGS:= $(CFLAGS)

#shell放入preinstall有问题，返回的数值会当作命令被执行
exist = $(shell if [ -d $(DIR_OBJ) ]; then echo "Directory $(DIR_OBJ) already exists,no need to create"; else mkdir -p $(DIR_OBJ); fi;)
preinstall:
	@echo $(exist)




all: $(TARGET)

$(TARGET) :exclude=$(filter-out $@,$(TARGET))
$(TARGET) :preinstall $(OBJS)
#	$(exclude)=$(filter-out $@,$(TARGET))
#	$($(TARGET:%=%.d):%.d=%.cpp)
#	exclude1=$(exclude:%=%.o)
#	$(CC) $(filter-out $(exclude:%=$(DIR_OBJ)/%.o),$(OBJS)) $(LDFLAGS) -fPIC $(addprefix -L,$(DIR_LIB))  $(addprefix -l,$(LIBS))   --verbose -o $(DIR_OBJ)/$@ 
	$(CC) $(filter-out $(exclude:%=$(DIR_OBJ)/%.o),$(OBJS)) $(LDFLAGS) -fPIC $(addprefix -L,$(DIR_LIB))  -Wl,-Bstatic $(addprefix -l,$(LIBS_STATIC))  -Wl,-Bdynamic $(addprefix -l,$(LIBS))  -o $(DIR_OBJ)/$@ 
#	@$(DIR_OBJ)/$@    #编译后立即执行

lib:include=$(filter-out $(TARGET),$(OBJ:%.o=%))
lib:opt=-fPIC -shared
lib:preinstall $(OBJS)
#	@echo $(include:%=$(DIR_OBJ)/%.o)
#	cd src && gcc -std=gnu99 -shared -o lua53.dll $(include:%=%.o)
	cd bin && $(CC) $(opt) $(include:%=%.o) $(LDFLAGS)  $(addprefix -L,$(DIR_LIB))  -Wl,-Bstatic $(addprefix -l,$(LIBS_STATIC))  -Wl,-Bdynamic $(addprefix -l,$(LIBS))  -o lib$(TARGET_SO).so
#	strip --strip-unneeded bin/lua.dll 

clean:
	-rm -rf $(OBJS) $(DEPS) $(addprefix $(DIR_OBJ)/,$(TARGET)) $(addprefix $(DIR_OBJ)/lib,$(TARGET_SO:%=%.so))
	-@echo ' '

.PHONY: all clean dependents preinstall

# Each subdirectory must supply rules for building sources it contributes

$(DIR_OBJ)/%.o: $(DIR_SRC)/%.cpp
#$(DIR_SRC)/%.o: $(DIR_SRC)/%.cpp
	@echo 'Building c++ file: $< $@'
	@echo 'Written by WanQing'
#	$(CC)  -c  -MMD -MP -MF"$(@:%.o=%.d)" -MT"$(@)" -o "$@" "$<"
	$(CC) $(opt) $(CXXFLAGS) -c -fmessage-length=0 -MMD -MP -MF"$(@:%.o=%.d)" -MT"$(@)" -o "$@" "$<"
	@echo 'Finished building: $<'
	@echo ' '

$(DIR_OBJ)/%.o: $(DIR_SRC)/%.c
	@echo 'Building c file: $< $@'
	@echo 'Written by WanQing'
#	cd bin && gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2  -I../include -c  -o "$(@:bin/%.o=%.o)"  "../$<"  "$(<:src/%.c=%.c)" 
	$(CC) $(opt) $(CFLAGS)  -c -fmessage-length=0 -MMD -MP -MF"$(@:%.o=%.d)" -MT"$(@)" -o "$@" "$<" # 
	@echo 'Finished building: $<'
	@echo ' '

# All Target $< $^ $(subst info,INFO,$@)
info info2: one.j two.j  
	@echo 'FILE_MK $(FILE_MK) $(TT) $(exist)'
	@echo $< $@

%.j:
	@echo 'test $@' 
	
echo:   #调试时显示一些变量的值  
	@echo SOURCE=$(SOURCE),INC=$(addprefix -I,$(DIR_INC))
	@echo OBJ=$(OBJ:%.o=%)
 
#提醒：当混合编译.c/.cpp时，为了能够在C++程序里调用C函数，必须把每一个要调用的
#C函数，其声明都包括在extern "C"{}块里面，这样C++链接时才能成功链接它们。 
