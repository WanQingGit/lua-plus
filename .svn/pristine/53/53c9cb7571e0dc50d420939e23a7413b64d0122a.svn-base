/*
 ** $Id: lstring.c,v 2.56.1.1 2017/04/19 17:20:42 roberto Exp $
 ** String table (keeps all strings handled by Lua)
 ** See Copyright Notice in lua.h
 */

#define lstring_c
#define LUA_CORE

#include "lprefix.h"

#include <string.h>

#include "lua.h"

#include "ldebug.h"
#include "ldo.h"
#include "lmem.h"
#include "lobject.h"
#include "lstate.h"
#include "lstring.h"
#include "ltable.h"
#include "lapi.h"
#include "qlist.h"
#define MEMERRMSG       "not enough memory"

/*
 ** Lua will use at most ~(2^LUAI_HASHLIMIT) bytes from a string to
 ** compute its hash
 */
#if !defined(LUAI_HASHLIMIT)
#define LUAI_HASHLIMIT		5
#endif

/*
 ** equality for long strings
 */
int luaS_eqlngstr(TString *a, TString *b) {
	size_t len = a->length;
	lua_assert(a->tt == LUA_TLNGSTR && b->tt == LUA_TLNGSTR);
	return (a == b) || /* same instance or... */
	((len == b->length) && /* equal length and ... */
	(memcmp(getstr(a), getstr(b), len) == 0)); /* equal contents */
}

unsigned int luaS_hash(const char *str, size_t l, unsigned int seed) {
	unsigned int h = seed ^ cast(unsigned int, l); //Times33
	size_t step = (l >> LUAI_HASHLIMIT) + 1;
	for (; l >= step; l -= step)
		h ^= ((h << 5) + (h >> 2) + cast_byte(str[l - 1]));
	return h;
}

unsigned int luaS_hashlongstr(TString *ts) {
	lua_assert(ts->tt == LUA_TLNGSTR);
	if (ts->extra == 0) { /* no hash? */
		ts->hash = luaS_hash(getstr(ts), ts->length, _G->seed);
		ts->extra = 1; /* now it has its hash */
	}
	return ts->hash;
}

/*
 ** resizes the string table
 */
void luaS_resize(lua_State *L, int newsize) {
	luaH_resize_(L, G(L)->strt, newsize);
}

/*
 ** Clear API string cache. (Entries cannot be empty, so fill them with
 ** a non-collectable string.)
 */
void luaS_clearcache(global_State *g) {
}

/*
 ** Initialize the string table and the string cache
 */
void luaS_init(lua_State *L) {
	global_State *g = G(L);
	if (g->strt == NULL) {
		Table *strt = luaH_create(L, 0, MINSTRTABSIZE);
		g->strt = strt;
		refInc(strt);
		box_remove(L,O2B(strt));
		/* pre-create memory-error message */
		g->memerrmsg = luaS_newliteral(L, MEMERRMSG);
		refInc(g->memerrmsg);/* it should never be collected */
	}
}

/*
 ** creates a new string object
 */
static TString *createstrobj(lua_State *L, size_t l, int tag) {
	TString *ts;
	size_t totalsize = sizelstring(l);
	; /* total size of TString object */
	ts = (TString*) luaC_newobjNotGC(L, tag, totalsize);
	ts->info = ts->extra = 0;
	getstr(ts)[l] = '\0'; /* ending 0 */
	return ts;
}

TString *luaS_createlngstrobj(lua_State *L, size_t l) {
	TString *ts = createstrobj(L, l, LUA_TLNGSTR);
	ts->info = ts->extra = 0;
//	ts->hash = cast(unsigned int, -1);
	ts->length = l;
	return ts;
}

void luaS_remove(lua_State *L, TString *ts) {
}

/*
 ** checks whether short string exists and reuses it or creates a new one
 */
static TString *internshrstr(lua_State *L, const char *str, size_t l) {
	TString *ts;
	global_State *g = G(L);
	NodeSet *res;
	if (luaH_gset_str(L, g->strt, str, l, &res)) {
		ts = res->i_key->value_.s;
//		ts->collectable = 0;
		return ts;
	}
	ts = createstrobj(L, l, LUA_TSHRSTR);
	ts->hash = res->hash;
	memcpy(getstr(ts), str, l * sizeof(char));
	ts->length = l;
	res->i_key = cast(TValue*, ts);
	return ts;
}

/*
 ** new string (with explicit length)
 */
TString *luaS_newlstr(lua_State *L, const char *str, size_t l) {
	if (l <= LUAI_MAXSHORTLEN) /* short string? */
		return internshrstr(L, str, l);
	else {
		TString *ts;
		if (l >= (MAX_SIZE - sizeof(TString)) / sizeof(char))
			luaM_toobig(L);
		ts = luaS_createlngstrobj(L, l);
		memcpy(getstr(ts), str, l * sizeof(char));
		return ts;
	}
}

/*
 ** Create or reuse a zero-terminated string, first checking in the
 ** cache (using the string address as a key). The cache can contain
 ** only zero-terminated strings, so it is safe to use 'strcmp' to
 ** check hits.
 */
TString *luaS_new(lua_State *L, const char *str) {
	return luaS_newlstr(L, str, strlen(str));
}

Udata *luaS_newudata(lua_State *L, size_t s) {
	Udata *u;
	GCObj *o;
	if (s > MAX_SIZE - sizeof(Udata))
		luaM_toobig(L);
	o = luaC_newobj(L, LUA_TUSERDATA, sizeludata(s));
	u = gco2u(o);
	u->len = s;
	u->metatable = NULL;
	setuservalue(L, u, luaO_nilobject);
	return u;
}

