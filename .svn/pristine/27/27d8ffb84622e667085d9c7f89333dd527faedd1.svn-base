/*
 ** $Id: ltable.h,v 2.23.1.2 2018/05/24 19:39:05 roberto Exp $
 ** Lua tables (hash)
 ** See Copyright Notice in lua.h
 */

#ifndef ltable_h
#define ltable_h

#include "lobject.h"

//#define gnode(t,i)	(&(t)->node[i])
//#define gval(n)		(&(n)->i_val)
#define gnext(n)	((n)->i_key.nk.next)

/* 'const' to avoid wrong writings that can mess up field 'next' */
//#define gkey(n)		cast(const TValue*, (&(n)->i_key.tvk))
/*
 ** writable version of 'gkey'; allows updates to individual fields,
 ** but not to the whole (which has incompatible type)
 */
//#define wgkey(n)		(&(n)->i_key.nk)
#define invalidateTMcache(t)	((t)->flags = 0)

/* true when 't' is using 'dummynode' as its hash part */
#define isdummy(t)		(sizenode(t) == 0)

/* allocated size for hash nodes */
#define allocsizenode(t)	sizenode(t)

/* returns the key, given the value of a table entry */
#define keyfromval(v) \
  (gkey(cast(Node *, cast(char *, (v)) - offsetof(Node, i_val))))

LUAI_FUNC const TValue *luaH_getint(Table *t, lua_Integer key);
LUAI_FUNC void luaH_setint(lua_State *L, Table *t, lua_Integer key,
		TValue *value);
LUAI_FUNC const TValue *luaH_getshortstr(Table *t, TString *key);
LUAI_FUNC const TValue *luaH_getstr(Table *t, TString *key);

LUAI_FUNC TValue *luaH_get(Table *t, const TValue *key);
LUAI_FUNC TValue *luaH_newkey(lua_State *L, Table *t, const TValue *key);
LUAI_FUNC TValue *luaH_set(lua_State *L, Table *t, const TValue *key);
LUAI_FUNC Table *luaH_new(lua_State *L);
LUAI_FUNC Table *luaH_create(lua_State *L, int isTable, int defsize);
LUAI_FUNC void luaH_resize(lua_State *L, Table *t, unsigned int nasize,
		unsigned int nhsize);
LUAI_FUNC void luaH_resizearray(lua_State *L, Table *t, unsigned int nasize);
//LUAI_FUNC void luaH_free(lua_State *L, Table *t);
LUAI_FUNC int luaH_next(lua_State *L, Table *t, StkId key);
lua_Integer gethash(const TValue *key);
LUAI_FUNC lua_Unsigned luaH_getn(Table *t);

LUAI_FUNC int luaH_gset(lua_State *L, Table *t, const TValue *key,
		lua_Integer hash, int insert, Node *res);
LUAI_FUNC int luaH_gset_str(lua_State *L, Table *t, const char *key, int len,
		NodeSet **res);
LUAI_FUNC TValue *luaH_gset_int(lua_State *L, Table *t, lua_Integer key);
LUAI_FUNC void luaH_free(lua_State *L, Table *t);
LUAI_FUNC void luaH_resize_(lua_State *L, Table *t, lua_Integer size);
LUAI_FUNC int luaH_setifexist(lua_State *L, Table *t, TValue *key, TValue *val);
LUAI_FUNC void luaH_free_set(lua_State *L, Table *t);
LUAI_FUNC int luaH_del(lua_State *L, Table *t, const TValue *key, NodeMap *res);
int luaH_del_set(lua_State *L, Table *t, const TValue *key, lua_Integer hash);
void luaH_setdel(lua_State *L, Table *t, TValue *key, TValue *value);
void table_clear_cache();
#define int_get(L,i) luaH_gset_int(L, G(L)->intt, i)

#endif
